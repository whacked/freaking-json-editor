var jsNull = exports.jsNull = eval('null');
(function () {
    var keyClassø1 = 'key';
    var valClassø1 = 'value';
    var lsClassø1 = 'ls';
    var kvClassø1 = 'kv';
    var nullClassø1 = 'null';
    void 0;
    var genEditor = function genEditor(parent, obj) {
        return function () {
            var isIsArrayø1 = Array.isArray(obj);
            var isIsNullø1 = obj === jsNull;
            var containerø1 = isIsArrayø1 ? $('<ol>', {
                'start': 0,
                'class': lsClassø1
            }) : isIsNullø1 ? $('<div>', { 'class': nullClassø1 }) : $('<div>', { 'class': kvClassø1 });
            parent.append(containerø1);
            return obj ? $.each(obj, function (k, v) {
                return function () {
                    var rowø1 = isIsArrayø1 ? $('<li>') : $('<div>', { 'class': 'item' }).append($('<input>', {
                        'type': 'text',
                        'class': keyClassø1
                    }).val(k));
                    containerø1.append(rowø1);
                    return typeof(v) === 'object' ? genEditor(rowø1, v) : rowø1.append($('<input>', {
                        'type': 'text',
                        'class': valClassø1 + ' ' + typeof(v)
                    }).val(v));
                }.call(this);
            }) : void 0;
        }.call(this);
    };
    var getChildDistance = function getChildDistance($parent, cls) {
        return $parent.hasClass(cls) ? 0 : function () {
            var distLsø1 = [];
            $parent.find('.' + cls).each(function (i, el) {
                return distLsø1.push($(el).parentsUntil($parent)['length']);
            });
            return Math.min.apply(void 0, distLsø1);
        }.call(this);
    };
    var formToJson = function formToJson($domel, rtn) {
        return $domel.prop('tagName') === 'INPUT' ? $domel.hasClass('number') ? parseInt($domel.val()) : $domel.val() : function () {
            var rtnø2 = rtn || [
                [
                    getChildDistance($domel, lsClassø1),
                    []
                ],
                [
                    getChildDistance($domel, kvClassø1),
                    {}
                ],
                [
                    getChildDistance($domel, nullClassø1),
                    jsNull
                ]
            ].sort()[0][1];
            var isPushingToArrayø1 = Array.isArray(rtnø2);
            (function loop() {
                var recur = loop;
                var elArrø1 = $domel.children();
                var keyø1 = void 0;
                do {
                    recur = 0 < elArrø1['length'] ? function () {
                        var $elø1 = $(elArrø1[0]);
                        var elValø1 = $elø1.val();
                        var elTagø1 = $elø1.prop('tagName');
                        return elTagø1 === 'INPUT' ? isPushingToArrayø1 ? rtnø2.push(formToJson($elø1)) : function () {
                            var nextø1 = elArrø1[1];
                            return rtnø2[elValø1] = formToJson($(nextø1), void 0);
                        }.call(this) : function () {
                            isPushingToArrayø1 && $elø1.hasClass(kvClassø1) ? rtnø2.push(formToJson($elø1, void 0)) : formToJson($elø1, rtnø2);
                            return loop[0] = elArrø1.slice(1), loop[1] = keyø1, loop;
                        }.call(this);
                    }.call(this) : void 0;
                } while (elArrø1 = loop[0], keyø1 = loop[1], recur === loop);
                return recur;
            }.call(this));
            return rtnø2;
        }.call(this);
    };
    return function ($) {
        return $.fn['json_editor'] = function (opt) {
            return function () {
                var frmø1 = $('<form>');
                var isIsCustomTextø1 = opt && opt['text'];
                var taø1 = isIsCustomTextø1 ? $(opt['text']) : $('<textarea>');
                isIsCustomTextø1 ? function () {
                    return $(this).append(frmø1);
                }.call(this) : function () {
                    var mainRowø1 = $('<div>', { 'class': 'viewer-row' });
                    var mainViewø1 = $('<div>', { 'class': 'viewer-main' }).append(mainRowø1);
                    taø1.val(JSON.stringify([
                        'one',
                        {
                            '1': 'some number',
                            'a': 1,
                            'b': {
                                'foo': 'bar',
                                'baz': 'quux'
                            },
                            'x': [
                                1,
                                2,
                                3,
                                4
                            ],
                            'None': jsNull,
                            'emptylist': [],
                            'emptyobj': {},
                            'y': {
                                'nested': 'map',
                                'within': [
                                    'another array',
                                    'cool',
                                    { 'yet': 'more' },
                                    1,
                                    {
                                        'snowman': [
                                            'five',
                                            5,
                                            'f5'
                                        ]
                                    },
                                    { 'ice': { 'cream': 'cone' } }
                                ]
                            }
                        },
                        'tow'
                    ], void 0, 4));
                    mainRowø1.append($('<div>', { 'class': 'viewer-cell' }).append(taø1)).append($('<div>', { 'class': 'viewer-cell' }).append(frmø1));
                    return this.empty().append(mainViewø1);
                }.call(this);
                var respitJson = function respitJson() {
                    return function () {
                        var finalø1 = formToJson(frmø1);
                        return taø1.val(JSON.stringify(finalø1, void 0, 4));
                    }.call(this);
                };
                taø1.change(function (_) {
                    return function () {
                        var textø1 = taø1.val();
                        var jsonø1 = JSON.parse(textø1);
                        genEditor(frmø1.empty(), jsonø1);
                        return frmø1.find('input').change(respitJson);
                    }.call(this);
                });
                taø1.change();
                return respitJson();
            }.call(this);
        };
    }(jQuery);
}.call(this));
//# sourceMappingURL=data:application/json;base64,
